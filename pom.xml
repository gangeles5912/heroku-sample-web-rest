<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.test</groupId>
	<artifactId>heroku-sample-web-rest</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>sample test</name>

	<dependencies>
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-server</artifactId>
			<version>1.8</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.3</version>
				<executions>
					<execution>

						<!-- RECOMMANDED Deploying Tomcat-based Java Web Applications with 
							Webapp Runner (Open source) 
							_______________________________________________________________ 
							Local: java -jar target/dependency/webapp-runner.jar target/*.war http://localhost:8080/rest/hello/naven 
							Heroku: Procfile - ->web: java $JAVA_OPTS -jar target/dependency/webapp-runner.jar 
							-port $PORT target/*.war (use __port) -->
						<phase>package</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>com.github.jsimone</groupId>
									<artifactId>webapp-runner</artifactId>
									<version>8.0.30.2</version> <!-- Uses Tomcat version 8.0.30 -->
									<destFileName>webapp-runner.jar</destFileName>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>

				<!-- Deploy a Java Web Application That Launches with Jetty Runner 
					______________________________________________________________ 
					Local: java -jar target/dependency/jetty-runner.jar target/*.war http://localhost:8080/rest/hello/naven 
					Heroku: Procfile - -> web: java $JAVA_OPTS -jar target/dependency/jetty-runner.jar 
					-port $PORT target/*.war (use __port) https://heroku-sample-web-rest.herokuapp.com/rest/hello/welcome -->
					<!--  <execution>
						<phase>package</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>org.eclipse.jetty</groupId>
									<artifactId>jetty-runner</artifactId>
									<version>9.3.3.v20150827</version>
									<destFileName>jetty-runner.jar</destFileName>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
					-->
				</executions>
			</plugin>

			<plugin>

				<!-- 
					RECOMMANDED 
					
					Heroku Maven Plugin to deploy(just war/jar) applications 
					with webapp-runner. This plugin is used to deploy Java applications directly 
					to Heroku without pushing to a Git repository. This is can be useful when 
					deploying from Continuous Integration server such as Travis CI or Jenkins, 
					deploying pre-built Jar or War files. 
					
					 
					From Eclipse:
						heroku auth:token 
						Set elipse environment variable HEROKU_API_KEY with the value that got from above command. 
						Goal:clean install (This compiles the code and creates the war file) 
						Goal:heroku:deploy-war ( This deploys the war file to Heroku) 
						https://heroku-sample-web-rest.herokuapp.com/rest/hello/naven 
					From CLI:
						heroku auth:token 
						heroku config:set HEROKU_API_KEY=<set-the-api-key> -a <app-name> 
						mvn clean heroku:deploy-war 
						https://heroku-sample-web-rest.herokuapp.com/rest/hello/naven
						 
					Run local: 
						mvn heroku:run-war (run local) http://localhost:8080/rest/hello/naven 
				-->
				<groupId>com.heroku.sdk</groupId>
				<artifactId>heroku-maven-plugin</artifactId>
				<version>1.0.0</version>

				<configuration>
					<appName>calm-everglades-68376</appName>				
				</configuration>
				


			</plugin>

			<plugin>
				<!-- mvn clean isntall 
				mvn jetty:run http://localhost:8080/heroku-sample-web-rest/rest/hello/naven 
				-->
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<configuration>

					<webApp>
						<contextPath>/${artifactId}</contextPath>
					</webApp>
					<useProvidedScope>true</useProvidedScope>
					<scanIntervalSeconds>600</scanIntervalSeconds>
					<webAppSourceDirectory>target/${build.finalName}</webAppSourceDirectory>
					<stopPort>1234</stopPort>
					<stopKey>foo</stopKey>

				</configuration>
			</plugin>

		</plugins>
	</build>
</project>